---
# passbolt

- name: Download Passbolt repository setup script
  get_url:
    url: "https://download.passbolt.com/ce/installer/passbolt-repo-setup.ce.sh"
    dest: "/tmp/passbolt-repo-setup.ce.sh"

- name: Make Passbolt repository setup script executable
  file:
    path: /tmp/passbolt-repo-setup.ce.sh
    mode: "0755"

- name: Download Passbolt SHA512 checksum file
  get_url:
    url: "https://github.com/passbolt/passbolt-dep-scripts/releases/latest/download/passbolt-ce-SHA512SUM.txt"
    dest: "/tmp/passbolt-ce-SHA512SUM.txt"

- name: Get SHA-512 checksum of the setup script
  ansible.builtin.stat:
    path: /tmp/passbolt-repo-setup.ce.sh
    checksum_algorithm: sha512
    get_checksum: yes
  register: script_checksum

- name: Conditionally execute the script if checksum matches
  ansible.builtin.shell:
    cmd: sudo bash /tmp/passbolt-repo-setup.ce.sh
  when: script_checksum.stat.checksum == passbolt_checksum_value
  register: script_execution
  ignore_errors: yes

- name: Remove setup script if checksum verification fails
  ansible.builtin.file:
    path: /tmp/passbolt-repo-setup.ce.sh
    state: absent
  when: script_checksum.stat.checksum != passbolt_checksum_value

- name: Run passbolt-repo-setup.ce.sh script
  command: "/tmp/passbolt-repo-setup.ce.sh"

- name: Configure Passbolt MySQL settings
  ansible.builtin.debconf:
    name: passbolt-ce-server
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  loop:
    - { question: "passbolt/mysql-configuration", value: "true", vtype: "boolean" }
    - { question: "passbolt/mysql-passbolt-username", value: "passboltadmin", vtype: "string" }
    - { question: "passbolt/mysql-passbolt-password", value: "{{ passbolt_db_admin_password }}", vtype: "password" }
    - { question: "passbolt/mysql-passbolt-password-repeat", value: "{{ passbolt_db_admin_password }}", vtype: "password" }
    - { question: "passbolt/mysql-passbolt-dbname", value: "passboltdb", vtype: "string" }

- name: Configure Passbolt Nginx settings
  ansible.builtin.debconf:
    name: passbolt-ce-server
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  loop:
    - { question: "passbolt/nginx-configuration", value: "true", vtype: "boolean" }
    - { question: "passbolt/nginx-configuration-three-choices", value: "auto", vtype: "select" }
    - { question: "passbolt/nginx-domain", value: "{{ _domain }}", vtype: "string" }
    - { question: "passbolt/nginx-certificate-file", value: "/etc/letsencrypt/live/{{ _domain }}/fullchain.pem", vtype: "string" }
    - { question: "passbolt/nginx-certificate-key-file", value: "/etc/letsencrypt/live/{{ _domain }}/privkey.pem", vtype: "string" }

- name: Install Passbolt CE server in non-interactive mode
  apt:
    name: passbolt-ce-server
    state: present

# Postfix
- name: install postfix MTA and mailutils
  apt:
    pkg:
    - postfix
    - mailutils
    state: present

- name: updating postfix inet_interfaces
  ansible.builtin.lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^inet_interfaces ='
    line: 'inet_interfaces = 127.0.0.1'

- name: updating postfix mynetwork
  ansible.builtin.lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^mynetworks ='
    line: 'mynetworks = 192.168.0.0/16, 172.16.0.0/12, {{ ansible_default_ipv4.address }}/32'
  notify: restart postfix

- name: Update /etc/hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ ansible_default_ipv4.address }} {{ _domain }}"
    state: present
  