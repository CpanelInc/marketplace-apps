-
# motd and creds gen
- name: copy MOTD template to /etc/motd
  template:
    src: templates/motd.j2
    dest: /etc/motd

- name: writing passbolt creds into file
  copy:
    dest: /home/{{ username }}/.credentials
    mode: '0600'
    content: |
      Sudo Username: {{ username }}
      Sudo Password: {{ password }}
      Passbolt Admin Database User: passboltadmin
      Passbolt Database: passboltdb
      Passbolt Database Password: {{ passbolt_db_admin_password }}
      Mysql Root Password: {{ mysql_root_password }}
      passbolt Login: admin
      passbolt Password: {{ passbolt_password }}

- name: Copy passbolt config template to /etc/passbolt/passbolt.php
  template:
    src: templates/passbolt.php
    dest: /etc/passbolt/passbolt.php
    owner: www-data
    group: www-data
    mode: '0440'

- name: Create GPG key generation batch file with passphrase
  copy:
    dest: "/tmp/gpg_key_gen_batch"
    content: |
      %echo Generating a GPG key with a passphrase
      Key-Type: RSA
      Key-Length: 2048
      Subkey-Type: RSA
      Subkey-Length: 2048
      Name-Real: {{ gpg_name }}
      Name-Comment: Ansible generated key
      Name-Email: {{ gpg_email }}
      Expire-Date: 0
      Passphrase: {{ gpg_key_passphrase }}
      %commit
      %echo Done
  no_log: true

- name: Generate GPG key non-interactively with passphrase
  command: gpg --batch --generate-key /tmp/gpg_key_gen_batch
  environment:
    GNUPGHOME: /root/.gnupg

- name: Get GPG secret key
  shell: gpg --list-secret-keys | grep sec
  register: gpg_secret_keys_output
  ignore_errors: yes
  changed_when: False

- name: Extract and save the secret key to a variable
  set_fact:
    gpg_secret_key: "{{ gpg_secret_keys_output.stdout | regex_search('([A-F0-9]{40})') }}"
  when: gpg_secret_keys_output.stdout is defined

- name: Export GPG public key to serverkey.asc
  shell: gpg --armor --export {{ gpg_secret_key }} > /etc/passbolt/gpg/serverkey.asc
  args:
    executable: /bin/bash

- name: Export GPG private key to serverkey_private.asc
  shell: gpg --armor --export-secret-keys {{ gpg_secret_key }} > /etc/passbolt/gpg/serverkey_private.asc
  args:
    executable: /bin/bash

- name: Writing gpg_secret_key to group_vars/linode/vars
  lineinfile:
    path: group_vars/linode/vars
    line: "gpg_secret_key: '{{ gpg_secret_key }}'"

- name: Update GPG fingerprint in passbolt.php
  ansible.builtin.replace:
    path: /etc/passbolt/passbolt.php
    regexp: "'fingerprint' => '[A-F0-9]{40}',"
    replace: "'fingerprint' => '{{ gpg_secret_key }}',"

- name: Install Passbolt without admin user
  become: yes
  become_method: sudo
  become_user: "{{ webuser }}"
  shell: "/usr/share/php/passbolt/bin/cake passbolt install --no-admin --force"
  args:
    executable: /bin/bash

- name: Register first admin user for Passbolt
  become: yes
  become_method: sudo
  become_user: "{{ webuser }}"
  shell: "/usr/share/php/passbolt/bin/cake passbolt register_user -u {{ passbolt_first_admin_email }} -f {{ passbolt_first_admin_username }} -l {{ passbolt_first_admin_surname }} -r admin"
  args:
    executable: /bin/bash